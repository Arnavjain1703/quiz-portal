from __future__ import absolute_import

from functools import wraps

from django.http import HttpRequest

from ratelimit import ALL, UNSAFE
from ratelimit.exceptions import Ratelimited
from ratelimit.utils import is_ratelimited


import logging
import ipaddress
from functools import wraps

from datetime import timedelta

from django.conf import settings

from ratelimit.exceptions import Ratelimited

from blacklist.models import Rule
from blacklist.middleware import _add_rule as _middleware_add_rule

logger = logging.getLogger(__name__)


__all__ = ['ratelimit']


def ratelimit(group=None, key=None, rate=None, method=ALL, block=False):
    def decorator(fn):
        @wraps(fn)
        def _wrapped(*args, **kw):
            # Work as a CBV method decorator.

            if isinstance(args[0], HttpRequest):
                request = args[0]
            else:
                request = args[1]

            request.limited = getattr(request, 'limited', False)

            ratelimited = is_ratelimited(request=request, group=group, fn=fn,
                                         key=key, rate=rate, method=method,
                                         increment=True)
            
            print(rate)

            if ratelimited and block:
                # Creating rules for Ip Restriction

                duration=timedelta(minutes=5)     # We can modify this time as and when required.
                
                addr = request.META['REMOTE_ADDR']
                ip = ipaddress.ip_address(addr)
                request_id = getattr(request, 'id', '')
                comments = 'Automatically blacklisted ratelimited client.\n' \
                    f'Request ID: {request_id}\n' \
                    f'Request line: {request.method} {request.get_full_path()}\n'
                rule = Rule(address=ip.compressed, duration=duration, comments=comments)
                rule.save()

                raise Ratelimited()
            return fn(*args, **kw)
        return _wrapped
    return decorator


ratelimit.ALL = ALL
ratelimit.UNSAFE = UNSAFE
